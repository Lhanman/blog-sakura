package com.Lhan.personal_blog.util;


import com.Lhan.personal_blog.entity.IpLocation;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.DefaultResourceLoader;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;

import java.io.*;
import java.nio.MappedByteBuffer;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * ip地址服务
 */
public class IpLocationUtil {


    /**
     * 纯真ip数据库名
     */
    private String IP_FILE = "/qqwry.dat";

    /**
     * 纯真ip数据库保存的文件
     */
    private String  INSTALL_DIR="/IpDatabase";

    /**
     * 常量
     */
    private static final int IP_RECORD_LENGTH = 7;

    /**
     * 读取模式1
     */
    private static final byte REDIRECT_MODE_1 = 0x01;

    /**
     * 读取模式2
     */
    private static final byte REDIRECT_MODE_2 = 0x02;

    /**
     * 缓存，查询ip时首先查询缓存，以减少不必要的重复查找
     */
    private Map<String, IpLocation> ipCache;

    /**
     * 随机文件访问类
     */
    private RandomAccessFile ipFile;

    /**
     * 内存映射文件
     */
    private MappedByteBuffer mappedByteBuffer;

    /**
     * 起始地址的开始和结束的绝对偏移
     */
    private long ipBegin,ipEnd;

    /**
     * 为提高效率而采用临时变量
     */
    private IpLocation location;

    /**
     * 为提高效率而采用临时变量
     */
    private byte[] buf;

    /**
     * 为提高效率而采用的临时变量
     */
    private byte[] b4;

    /**
     * 为提高效率而采用的临时变量
     */
    private byte[] b3;

    /**
     * ip地址库文件出错
     */
    private static final String BAD_IP_FILE = "ip地址库文件出错";

    /**
     * 未知国家
     */
    private static final String UNKNOWN_COUNTRY = "未知国家";

    /**
     * 未知地区
     */
    private static final String UNKNOWN_AREA = "未知地区";

    public void init()
    {
        try {
            //缓存一定要用ConcurrentHashMap,避免多线程下获取为空
            ipCache = new ConcurrentHashMap<>();
            location = new IpLocation();
            buf = new byte[100];
            b3 = new byte[3];
            b4 = new byte[4];
            try {

//                File file = new File("//home//blog//ipData//qqwry.dat");
                File file = new File("D://ipdataBase//qqwry.dat");
                System.out.println(file.getName());
                ipFile = new RandomAccessFile(file,"r");

            }
            catch (FileNotFoundException e)
            {
                //如果找不到文件，再尝试在当前目录下搜索，这次全部用小写文件名
                //因为有些系统可能区分大小写导致找不到ip地址信息文件
                String fileName = new File(IP_FILE).getName().toLowerCase();
                File[] files = new File(INSTALL_DIR).listFiles();
                System.out.println(files.length);

                for (int i=0; i<files.length; i++)
                {
                    if (files[i].isFile()) {
                        if (files[i].getName().toLowerCase().equals(fileName))
                        {
                            try {
                                ipFile = new RandomAccessFile(files[i],"r");
                            }
                            catch (FileNotFoundException e1)
                            {
                                System.out.println("ip地址信息获取失败，ip显示功能无法使用");
                                ipFile = null;
                            }
                            break;
                        }
                    }
                }
            }

            //如果打开文件成功，读取文件头信息
            if (ipFile != null)
            {
                try {
                    ipBegin = readLong4(0);
                    ipEnd = readLong4(4);
                    if (ipBegin == -1 || ipEnd == -1)
                    {
                        ipFile.close();;
                        ipFile = null;
                    }
                }
                catch (IOException e)
                {
                    ipFile = null;
                    System.out.println("ip地址信息文件格式出现错误"+e);
                }
            }
        }
        catch (Exception e)
        {
            System.out.println("IP地址服务初始化异常"+e.getMessage());
        }
    }

    /**
     * 从offset位置读取4个字节为一个long，因为java为big-endian格式
     * 所以没有办法，用这个函数进行转换
     */

    private long readLong4(long offset)
    {
        long ret = 0;
        try {
            ipFile.seek(offset);
            ret |= (ipFile.readByte() & 0xFF);
            ret |= ((ipFile.readByte() << 8) & 0xFF00);
            ret |= ((ipFile.readByte() << 16) & 0xFF0000);
            ret |= ((ipFile.readByte() << 24) & 0xFF000000);
            return ret;

        }
        catch (IOException e)
        {
            return -1;
        }
    }

    /**
     * 从offset位置读取3个字节为一个long，因为java为big-endian格式，所以没办法
     * 用了这么一个函数来做转换
     * @param offset 整数的起始偏移
     * @return 读取的long值，返回-1表示读取文件失败
     */
    private long readLong3(long offset) {
        long ret = 0;
        try {
            ipFile.seek(offset);
            ipFile.readFully(b3);
            ret |= (b3[0] & 0xFF);
            ret |= ((b3[1] << 8) & 0xFF00);
            ret |= ((b3[2] << 16) & 0xFF0000);
            return ret;
        } catch (IOException e) {
            return -1;
        }
    }

    /**
     * 从当前位置读取3个字节转换成long
     * @return 读取的long值，返回-1表示读取文件失败
     */
    private long readLong3() {
        long ret = 0;
        try {
            ipFile.readFully(b3);
            ret |= (b3[0] & 0xFF);
            ret |= ((b3[1] << 8) & 0xFF00);
            ret |= ((b3[2] << 16) & 0xFF0000);
            return ret;
        } catch (IOException e) {
            return -1;
        }
    }


    /**
     * 查询ip地址位置- synchronized的作用是避免多线程时获取区域信息为空
     */
    public synchronized IpLocation getIpLocation(final String ip)
    {
        IpLocation location = new IpLocation();
        location.setArea(this.getArea(ip));
        location.setCountry(this.getCountry(ip));
        return location;
    }


    /**
     * 根据ip搜索ip信息文件，得到IPLocation结构，所搜索的ip参数从类成员ip中得到
     */

    private IpLocation getIpLocation(final byte[] ip)
    {
        IpLocation info = null;
        long offset = locateIp(ip);
        if (offset != -1)
        {
            info = getIPLocation(offset);
        }
        if (info == null) {
            info = new IpLocation();
            info.setCountry(UNKNOWN_COUNTRY);
            info.setArea(UNKNOWN_AREA);
        }
        return info;
    }

    /**
     * 根据ip获取国家名
     * @param ip
     * @return
     */

    public String getCountry(byte[] ip)
    {
        //检查ip地址文件是否正常
        if (ipFile == null)
        {
            return BAD_IP_FILE;
        }
        //保存ip，转换ip字符数组为字符串
        String ipStr = IpUtil.getIpStringFromBytes(ip);
        //先检查cache中是否已经包含有这个ip的结果，没有再搜索文件
        if (ipCache.containsKey(ipStr))
        {
            IpLocation ipLocation = ipCache.get(ipStr);
            return ipLocation.getCountry();
        }
        else
        {
            IpLocation ipLocation = getIpLocation(ip);
            ipCache.put(ipStr,ipLocation.getCopy());
            return ipLocation.getCountry();
        }
    }

    /**
     * 根据String类型ip获取国家
     */
    public String getCountry(String ip)
    {
        return getCountry(IpUtil.getIpByteArrayFromString(ip));
    }

    /**
     * 根据ip得到地区名称
     */
    public String getArea(final byte[] ip)
    {
        //检查ip地址文件是否正常
        if (ipFile == null)
        {
            return BAD_IP_FILE;
        }

        //保存ip，转换ip字符数组为字符串
        String ipStr = IpUtil.getIpStringFromBytes(ip);
        //先检查cache中是否有ip结果，没有再进行搜索
        if (ipCache.containsKey(ipStr))
        {
            IpLocation ipLocation = ipCache.get(ipStr);
            return ipLocation.getArea();
        }
        else
        {
            IpLocation ipLocation = getIpLocation(ip);
            ipCache.put(ipStr,ipLocation.getCopy());
            return ipLocation.getArea();
        }
    }

    /**
     * 根据ip获取地区名称
     * 参数为String类型ip
     */
    public String getArea(final String ip)
    {
        return getArea(IpUtil.getIpByteArrayFromString(ip));
    }


    /**
     * 从offset位置读取四个字节的ip地址放进ip数组中，读取后的ip为big-endian格式，但是文件中式little-endian形式
     * 将进行转换
     */
    private void readIP(Long offset,byte[] ip)
    {
        try {
            ipFile.seek(offset);
            ipFile.readFully(ip);
            byte temp = ip[0];
            ip[0] = ip[3];
            ip[3] = temp;
            temp = ip[1];
            ip[1] = ip[2];
            ip[2] = temp;
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    /**
     * 从offset位置读取四个字节的ip地址放入ip数组中，读取后的ip为big-endian格式，但是
     * 文件中是little-endian形式，将会进行转换
     * @param offset
     * @param ip
     */
    private void readIP(int offset, byte[] ip) {
        mappedByteBuffer.position(offset);
        mappedByteBuffer.get(ip);
        byte temp = ip[0];
        ip[0] = ip[3];
        ip[3] = temp;
        temp = ip[1];
        ip[1] = ip[2];
        ip[2] = temp;
    }



    /**
     * 把类成员ip和beginIp比较，注意这个beginIp是big-endian的
     * @param ip 要查询的IP
     * @param beginIp 和被查询IP相比较的IP
     * @return 相等返回0，ip大于beginIp则返回1，小于返回-1。
     */
    private int compareIP(byte[] ip, byte[] beginIp) {
        for(int i = 0; i < 4; i++) {
            int r = compareByte(ip[i], beginIp[i]);
            if(r != 0)
                return r;
        }
        return 0;
    }

    /**
     * 把两个byte当作无符号数进行比较
     * @param b1
     * @param b2
     * @return 若b1大于b2则返回1，相等返回0，小于返回-1
     */
    private int compareByte(byte b1, byte b2) {
        if((b1 & 0xFF) > (b2 & 0xFF)) // 比较是否大于
            return 1;
        else if((b1 ^ b2) == 0)// 判断是否相等
            return 0;
        else
            return -1;
    }




    /**
     * 这个方法将根据ip的内容，定位到包含这个ip国家地区的记录处，返回一个绝对偏移量
     * 方法: 二分法
     * 若找到返回结束ip偏移量，没有则返回-1
     * @param ip
     * @return
     */
    private long locateIp(byte[] ip)
    {
        long m = 0;
        int r;
        //比较第一个ip项
        readIP(ipBegin,b4);
        r = compareIP(ip,b4);
        if (r == 0) return ipBegin;
        else if (r < 0) return -1;

        //开始二分查询
        for (long i = ipBegin, j = ipEnd ; i < j ;)
        {
            m = getMiddleOffset(i,j);
            readIP(m,b4);
            r = compareIP(ip,b4);
            if (r > 0)
            {
                i = m;

            }
            else if (r < 0)
            {
                if(m == j)
                {
                    j -= IP_RECORD_LENGTH;
                    m = j;
                }

                else
                {
                    j = m;

                }
            }
            else
            {
                return readLong3(m + 4);
            }
        }
        //如果循环结束，那么i和j必相等，这个记录为最可能的记录，但是并非肯定,仍需检查
        m = readLong3(m + 4);
        readIP(m,b4);
        r = compareIP(ip,b4);
        if (r <= 0)
        {
            return m;

        }
        else
        {
            return -1;
        }
    }

    /**
     * 得到begin偏移和end偏移中间位置记录的偏移
     * @param begin
     * @param end
     * @return
     */
    private long getMiddleOffset(long begin, long end) {
        long records = (end - begin) / IP_RECORD_LENGTH;
        records >>= 1;
        if(records == 0) records = 1;
        return begin + records * IP_RECORD_LENGTH;
    }


    /**
     * 给定一个ip国家地区记录的偏移，返回一个IPLocation结构
     * @param offset 国家记录的起始偏移
     * @return IPLocation对象
     */
    private IpLocation getIPLocation(long offset) {
        try {
            // 跳过4字节ip
            ipFile.seek(offset + 4);
            // 读取第一个字节判断是否标志字节
            byte b = ipFile.readByte();
            if(b == REDIRECT_MODE_1) {
                // 读取国家偏移
                long countryOffset = readLong3();
                // 跳转至偏移处
                ipFile.seek(countryOffset);
                // 再检查一次标志字节，因为这个时候这个地方仍然可能是个重定向
                b = ipFile.readByte();
                if(b == REDIRECT_MODE_2) {
                    location.setCountry (  readString(readLong3()));
                    ipFile.seek(countryOffset + 4);
                } else
                    location.setCountry ( readString(countryOffset));
                // 读取地区标志
                location.setArea( readArea(ipFile.getFilePointer()));
            } else if(b == REDIRECT_MODE_2) {
                location.setCountry ( readString(readLong3()));
                location.setArea( readArea(offset + 8));
            } else {
                location.setCountry (  readString(ipFile.getFilePointer() - 1));
                location.setArea( readArea(ipFile.getFilePointer()));
            }
            return location;
        } catch (IOException e) {
            return null;
        }
    }

    /**
     * 给定一个ip国家地区记录的偏移，返回一个IPLocation结构，此方法应用与内存映射文件方式
     * @param offset 国家记录的起始偏移
     * @return IPLocation对象
     */
    private IpLocation getIPLocation(int offset) {
        // 跳过4字节ip
        mappedByteBuffer.position(offset + 4);
        // 读取第一个字节判断是否标志字节
        byte b = mappedByteBuffer.get();
        if(b == REDIRECT_MODE_1) {
            // 读取国家偏移
            int countryOffset = readInt3();
            // 跳转至偏移处
            mappedByteBuffer.position(countryOffset);
            // 再检查一次标志字节，因为这个时候这个地方仍然可能是个重定向
            b = mappedByteBuffer.get();
            if(b == REDIRECT_MODE_2) {
                location.setCountry (  readString(readInt3()));
                mappedByteBuffer.position(countryOffset + 4);
            } else
                location.setCountry (  readString(countryOffset));
            // 读取地区标志
            location.setArea(readArea(mappedByteBuffer.position()));
        } else if(b == REDIRECT_MODE_2) {
            location.setCountry ( readString(readInt3()));
            location.setArea(readArea(offset + 8));
        } else {
            location.setCountry (  readString(mappedByteBuffer.position() - 1));
            location.setArea(readArea(mappedByteBuffer.position()));
        }
        return location;
    }

    /**
     * 从offset偏移开始解析后面的字节，读出一个地区名
     * @param offset 地区记录的起始偏移
     * @return 地区名字符串
     * @throws IOException
     */
    private String readArea(long offset) throws IOException {
        ipFile.seek(offset);
        byte b = ipFile.readByte();
        if(b == REDIRECT_MODE_1 || b == REDIRECT_MODE_2) {
            long areaOffset = readLong3(offset + 1);
            if(areaOffset == 0)
                return UNKNOWN_AREA;
            else
                return readString(areaOffset);
        } else
            return readString(offset);
    }

    /**
     * @param offset 地区记录的起始偏移
     * @return 地区名字符串
     */
    private String readArea(int offset) {
        mappedByteBuffer.position(offset);
        byte b = mappedByteBuffer.get();
        if(b == REDIRECT_MODE_1 || b == REDIRECT_MODE_2) {
            int areaOffset = readInt3();
            if(areaOffset == 0)
                return UNKNOWN_AREA;
            else
                return readString(areaOffset);
        } else
            return readString(offset);
    }

    /**
     * 从offset偏移处读取一个以0结束的字符串
     * @param offset 字符串起始偏移
     * @return 读取的字符串，出错返回空字符串
     */
    private String readString(long offset) {
        try {
            ipFile.seek(offset);
            int i;
            for(i = 0, buf[i] = ipFile.readByte(); buf[i] != 0; buf[++i] = ipFile.readByte());
            if(i != 0)
                return IpUtil.getString(buf, 0, i, "GBK");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return "";
    }

    /**
     * 从内存映射文件的offset位置得到一个0结尾字符串
     * @param offset 字符串起始偏移
     * @return 读取的字符串，出错返回空字符串
     */
    private String readString(int offset) {
        try {
            mappedByteBuffer.position(offset);
            int i;
            for(i = 0, buf[i] = mappedByteBuffer.get(); buf[i] != 0; buf[++i] = mappedByteBuffer.get());
            if(i != 0)
                return IpUtil.getString(buf, 0, i, "GBK");
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
        }
        return "";
    }

    public String getCity(final String ipAddress){
        try {
            if(ipAddress.startsWith("192.168.")){
                return "本地局域网地址";
            }
            return getIpLocation(ipAddress).getCity();
        }catch (Exception e){
            System.out.printf("根据IP%s获取省份失败:%s", ipAddress, e.getMessage());
            return null;
        }
    }


    /**
     * 从内存映射文件的offset位置开始的3个字节读取一个int
     * @param offset
     * @return
     */
    private int readInt3(int offset) {
        mappedByteBuffer.position(offset);
        return mappedByteBuffer.getInt() & 0x00FFFFFF;
    }

    /**
     * 从内存映射文件的当前位置开始的3个字节读取一个int
     * @return
     */
    private int readInt3() {
        return mappedByteBuffer.getInt() & 0x00FFFFFF;
    }


    public Map getIpCache()
    {
        return ipCache;
    }


}
